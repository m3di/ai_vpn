name: Create VPN Docker Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION#v}" >> $GITHUB_OUTPUT
        else
          VERSION=dev-$(date +%Y%m%d-%H%M%S)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Prepare enhanced anti-censorship configuration
      run: |
        echo "Preparing enhanced anti-censorship configuration..."
        
        # Deploy enhanced configurations for production build
        if [ -f "server1/xray-config-enhanced.json" ] && [ -f "server2/xray-config-enhanced.json" ]; then
          echo "Using enhanced anti-censorship configurations"
          cp server1/xray-config-enhanced.json server1/xray-config.json
          cp server2/xray-config-enhanced.json server2/xray-config.json
          
          # Generate certificates for server1
          mkdir -p server1/certs
          openssl req -x509 -newkey rsa:4096 \
            -keyout server1/certs/server.key \
            -out server1/certs/server.crt \
            -days 365 -nodes \
            -subj "/C=US/ST=CA/L=San Francisco/O=Cloudflare Inc/CN=cloudflare.com"
          
          echo "✓ Enhanced anti-censorship configuration deployed"
          echo "✓ TLS certificates generated for server1"
        else
          echo "Enhanced configurations not found, using basic configurations"
        fi
        
    - name: Build and push Docker images
      run: |
        DOCKER_REPO="m3di/ai-vpn"
        VERSION_TAG="${{ steps.get_version.outputs.version_tag }}"
        
        # Build and push server1 image with enhanced anti-censorship
        echo "Building server1 image with anti-censorship features..."
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${DOCKER_REPO}:server1-${VERSION_TAG}" \
          -t "${DOCKER_REPO}:server1-latest" \
          --push \
          -f server1/Dockerfile server1/
        
        # Build and push server2 image with enhanced anti-censorship
        echo "Building server2 image with anti-censorship features..."
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${DOCKER_REPO}:server2-${VERSION_TAG}" \
          -t "${DOCKER_REPO}:server2-latest" \
          --push \
          -f server2/Dockerfile server2/
        
        # Build and push internet server image
        echo "Building internet server image..."
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${DOCKER_REPO}:internet-${VERSION_TAG}" \
          -t "${DOCKER_REPO}:internet-latest" \
          --push \
          -f internet/Dockerfile internet/
        
        # Build and push client image
        echo "Building client image..."
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${DOCKER_REPO}:client-${VERSION_TAG}" \
          -t "${DOCKER_REPO}:client-latest" \
          --push \
          -f client/Dockerfile client/
        
    - name: Create deployment files
      run: |
        DOCKER_REPO="m3di/ai-vpn"
        VERSION_TAG="${{ steps.get_version.outputs.version_tag }}"
        VERSION="${{ steps.get_version.outputs.version }}"
        
        mkdir -p release
        
        # Create server1 docker-compose file
        cat > release/docker-compose.server1.yml << EOF
        version: '3.8'
        
        services:
          vpn-server1:
            image: ${DOCKER_REPO}:server1-${VERSION_TAG}
            container_name: vpn-server1
            restart: unless-stopped
            ports:
              - "443:443"
            environment:
              - LOG_LEVEL=info
              - VMESS_UUID=550e8400-e29b-41d4-a716-446655440000
            volumes:
              - vpn-server1-logs:/var/log/xray
            networks:
              - vpn-network
            healthcheck:
              test: ["CMD", "nc", "-z", "localhost", "443"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            deploy:
              resources:
                limits:
                  memory: 512M
                reservations:
                  memory: 256M
        
        volumes:
          vpn-server1-logs:
            driver: local
        
        networks:
          vpn-network:
            driver: bridge
        EOF
        
        # Create server2 docker-compose file
        cat > release/docker-compose.server2.yml << EOF
        version: '3.8'
        
        services:
          vpn-server2:
            image: ${DOCKER_REPO}:server2-${VERSION_TAG}
            container_name: vpn-server2
            restart: unless-stopped
            ports:
              - "3128:3128"
            environment:
              - LOG_LEVEL=info
              - VMESS_UUID=550e8400-e29b-41d4-a716-446655440000
              - SERVER1_HOST=SERVER1_IP_PLACEHOLDER
              - SERVER1_PORT=443
            volumes:
              - vpn-server2-logs:/var/log/xray
            networks:
              - vpn-network
            healthcheck:
              test: ["CMD", "nc", "-z", "localhost", "3128"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            deploy:
              resources:
                limits:
                  memory: 512M
                reservations:
                  memory: 256M
        
        volumes:
          vpn-server2-logs:
            driver: local
        
        networks:
          vpn-network:
            driver: bridge
        EOF
        
        # Create production test script
        cat > release/test-production.sh << 'EOF'
        #!/bin/bash
        
        # Production test script for VPN Docker deployment
        
        set -e
        
        SERVER2_IP=${1:-"localhost"}
        SERVER1_IP=${2:-""}
        
        echo "=== VPN Production Test ==="
        echo "Server2 IP: $SERVER2_IP"
        echo "Server1 IP: $SERVER1_IP"
        echo ""
        
        # Test server2 HTTP proxy port
        echo "Testing Server2 HTTP proxy port..."
        if nc -zv $SERVER2_IP 3128 2>/dev/null; then
            echo "✅ Server2 port 3128 is accessible"
        else
            echo "❌ Server2 port 3128 is not accessible"
            exit 1
        fi
        
        # Test server1 VMess port (if IP provided)
        if [ -n "$SERVER1_IP" ]; then
            echo "Testing Server1 VMess port..."
            if nc -zv $SERVER1_IP 443 2>/dev/null; then
                echo "✅ Server1 port 443 is accessible"
            else
                echo "❌ Server1 port 443 is not accessible"
                exit 1
            fi
        fi
        
        # Test VMess chain
        echo ""
        echo "Testing VMess proxy chain..."
        RESULT=$(curl -s --max-time 10 --proxy $SERVER2_IP:3128 https://httpbin.org/ip)
        
        if [ $? -eq 0 ]; then
            echo "✅ VMess chain test successful"
            echo "Response: $RESULT"
            
            # Extract IP from response
            PROXY_IP=$(echo "$RESULT" | grep -o '"origin":[^,]*' | cut -d'"' -f4)
            echo "Proxy IP: $PROXY_IP"
        else
            echo "❌ VMess chain test failed"
            exit 1
        fi
        
        # Test HTTPS
        echo ""
        echo "Testing HTTPS through VMess chain..."
        HTTPS_RESULT=$(curl -s --max-time 10 --proxy $SERVER2_IP:3128 https://httpbin.org/user-agent)
        
        if [ $? -eq 0 ]; then
            echo "✅ HTTPS test successful"
            echo "Response: $HTTPS_RESULT"
        else
            echo "❌ HTTPS test failed"
            exit 1
        fi
        
        echo ""
        echo "🎉 All tests passed! VPN is working correctly."
        echo ""
        echo "To use this VPN, configure your applications with:"
        echo "  Proxy Type: HTTP Proxy"
        echo "  Proxy Server: $SERVER2_IP"
        echo "  Port: 3128"
        EOF
        
        chmod +x release/test-production.sh
        
        # Create deployment README
        cat > release/README.md << EOF
        # VPN Docker Deployment - $VERSION
        
        This release contains production-ready Docker images and deployment files for the VPN proxy chain with VMess protocol.
        
        ## Docker Images
        
        The following images are available on Docker Hub:
        
        - **Server1 (VMess Server)**: \`${DOCKER_REPO}:server1-${VERSION_TAG}\` or \`${DOCKER_REPO}:server1-latest\`
        - **Server2 (VMess Client)**: \`${DOCKER_REPO}:server2-${VERSION_TAG}\` or \`${DOCKER_REPO}:server2-latest\`
        - **Internet Server**: \`${DOCKER_REPO}:internet-${VERSION_TAG}\` or \`${DOCKER_REPO}:internet-latest\`
        - **Client**: \`${DOCKER_REPO}:client-${VERSION_TAG}\` or \`${DOCKER_REPO}:client-latest\`
        
        ## Quick Deployment
        
        ### Server1 (Exit Point)
        
        \`\`\`bash
        # Download and deploy server1
        wget https://github.com/m3di/ai_vpn/releases/download/$VERSION/docker-compose.server1.yml
        docker-compose -f docker-compose.server1.yml up -d
        \`\`\`
        
        ### Server2 (Entry Point)
        
        \`\`\`bash
        # Download and deploy server2
        wget https://github.com/m3di/ai_vpn/releases/download/$VERSION/docker-compose.server2.yml
        
        # Update SERVER1_IP
        sed -i 's/SERVER1_IP_PLACEHOLDER/YOUR_SERVER1_IP/' docker-compose.server2.yml
        
        # Deploy server2
        docker-compose -f docker-compose.server2.yml up -d
        \`\`\`
        
        ## Testing
        
        \`\`\`bash
        # Download test script
        wget https://github.com/m3di/ai_vpn/releases/download/$VERSION/test-production.sh
        chmod +x test-production.sh
        
        # Run tests
        ./test-production.sh SERVER2_IP SERVER1_IP
        \`\`\`
        
        ## Architecture
        
        \`\`\`
        Client → Server2 (HTTP:3128 → VMess) → Server1 (VMess Server:443) → Internet
        \`\`\`
        
        ## Features
        
        - **VMess Protocol**: Enhanced security with protocol obfuscation
        - **Docker Deployment**: Easy deployment and scaling
        - **Health Checks**: Automatic service monitoring
        - **Resource Limits**: Production-ready resource management
        - **Persistent Logs**: Volume-mounted logging
        - **Auto-Restart**: Containers restart on failure
        - **Multi-Platform**: AMD64 and ARM64 support
        
        ## Support
        
        For issues and questions:
        - Check container logs: \`docker logs <container-name>\`
        - Review deployment documentation
        - Create an issue on GitHub
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: VPN Docker Release ${{ steps.get_version.outputs.version }}
        make_latest: true
        body: |
          # VPN Docker Release - Enhanced Anti-Censorship Edition
          
          This release contains production-ready Docker images and deployment files for the VPN proxy chain with **Enhanced Anti-Censorship VMess Protocol**.
          
          ## 🛡️ Anti-Censorship Features
          
          - **TLS Obfuscation**: VMess traffic encrypted with TLS and appears as legitimate HTTPS
          - **HTTP Header Masquerading**: Traffic mimics cloudflare.com requests for evasion
          - **Certificate Spoofing**: Self-signed certificates with legitimate subjects
          - **Traffic Pattern Obfuscation**: Realistic timing and request patterns
          - **Port 443 Usage**: Standard HTTPS port for better evasion
          - **Deep Packet Inspection (DPI) Resistance**: Designed to bypass SSL connection timeouts
          
          ## 🐳 Docker Images
          
          All images are available on Docker Hub with multi-platform support (AMD64/ARM64):
          
          - **Server1 (VMess Server)**: `m3di/ai-vpn:server1-${{ steps.get_version.outputs.version_tag }}`
          - **Server2 (VMess Client)**: `m3di/ai-vpn:server2-${{ steps.get_version.outputs.version_tag }}`
          - **Internet Server**: `m3di/ai-vpn:internet-${{ steps.get_version.outputs.version_tag }}`
          - **Client**: `m3di/ai-vpn:client-${{ steps.get_version.outputs.version_tag }}`
          
          ## 🚀 Quick Deployment
          
          ### Server1 (Exit Point)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/docker-compose.server1.yml
          docker-compose -f docker-compose.server1.yml up -d
          ```
          
          ### Server2 (Entry Point)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/docker-compose.server2.yml
          sed -i 's/SERVER1_IP_PLACEHOLDER/YOUR_SERVER1_IP/' docker-compose.server2.yml
          docker-compose -f docker-compose.server2.yml up -d
          ```
          
          ## 🧪 Testing
          
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/test-production.sh
          chmod +x test-production.sh
          ./test-production.sh SERVER2_IP SERVER1_IP
          ```
          
          ## 🔧 Architecture
          
          ```
          Client → Server2 (HTTP:3128 → VMess) → Server1 (VMess Server:443) → Internet
          ```
          
          ## ✨ Features
          
          - **Enhanced VMess Protocol**: Anti-censorship VMess with TLS obfuscation
          - **SSL Timeout Prevention**: Specifically designed to bypass SSL connection timeouts
          - **Network Censorship Resistance**: HTTP header masquerading and traffic obfuscation
          - **Docker Deployment**: Easy deployment and scaling
          - **Health Checks**: Automatic service monitoring
          - **Resource Limits**: Production-ready resource management
          - **Persistent Logs**: Volume-mounted logging with V2Ray client configuration info
          - **Auto-Restart**: Containers restart on failure
          - **Multi-Platform**: AMD64 and ARM64 support
          
          ## 📋 Requirements
          
          - Docker Engine 20.10+
          - Docker Compose 2.0+
          - Servers with ports 443 (Server1) and 3128 (Server2) available
          - Network connectivity between servers
          
          **⚠️ Deploy Server1 first, then Server2!**
          
        files: |
          release/docker-compose.server1.yml
          release/docker-compose.server2.yml
          release/test-production.sh
          release/README.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 